# CI - Pytest CPU
#
# This workflow runs the CPU tests with Pytest. It can only be triggered by other workflows via
# `workflow_call`. It is used by the `wheel_tests.yml` workflow to run the Pytest CPU tests as a
# continuous job.
#
# It consists of the following job:
# run-tests:
#    - Downloads the jaxlib wheel from a GCS bucket. This wheel is usually built by the
#      build-jaxlib-artifact job in the `wheel_tests.yml` workflow.
#    - Executes the `run_pytest_cpu.sh` script, which performs the following actions:
#      - Installs the downloaded jaxlib wheel.
#      - Runs the CPU tests with Pytest.
name: CI - Pytest CPU

on:
  workflow_call:
    inputs:
      runner:
        description: "Which runner should the workflow run on?"
        type: string
        required: true
        default: "linux-x86-n2-16"
      python:
        description: "Which python version should the artifact be built for?"
        type: string
        required: true
        default: "3.12"
      enable-x64:
        description: "Should x64 mode be enabled?"
        type: string
        required: true
        default: "0"
      download_url_prefix:
        description: "GCS location prefix from where the artifacts should be downloaded"
        required: true
        default: 'gs://general-ml-ci-transient/jax-github-actions/jax/${{ github.workflow }}/${{ github.run_number }}/${{ github.run_attempt }}'
        type: string
      halt-for-connection:
        description: 'Should this workflow run wait for a remote connection?'
        type: boolean
        required: false
        default: false

jobs:
  run-tests:
    defaults:
      run:
        # Explicitly set the shell to bash to override Windows's default (cmd)
        shell: bash
    runs-on: ${{ inputs.runner }}
    container: ${{ (contains(inputs.runner, 'linux-x86') && 'us-central1-docker.pkg.dev/tensorflow-sigs/tensorflow/ml-build:latest') ||
                   (contains(inputs.runner, 'linux-arm64') && 'us-central1-docker.pkg.dev/tensorflow-sigs/tensorflow/ml-build-arm64:latest') ||
                   (contains(inputs.runner, 'windows-x86') && null) }}

    name: "Pytest CPU (${{ inputs.runner }}, Python ${{ inputs.python }}, x64=${{ inputs.enable-x64 }})"

    env:
      JAXCI_HERMETIC_PYTHON_VERSION: "${{ inputs.python }}"
      JAXCI_PYTHON: "python${{ inputs.python }}"
      JAXCI_ENABLE_X64: "${{ inputs.enable-x64 }}"

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      # Halt for testing
      - name: Wait For Connection
        uses: google-ml-infra/actions/ci_connection@main
        with:
          halt-dispatch-input: ${{ inputs.halt-for-connection }}
      - name: Set Platform env var for use in artifact download URL
        run: |
          os=$(uname -s | awk '{print tolower($0)}')
          arch=$(uname -m)

          # Adjust name for Windows
          if [[  $os  =~ "msys_nt" ]]; then
            os="windows"
          fi

          echo "PLATFORM=${os}_${arch}" >> $GITHUB_ENV
      - name: Download jaxlib wheel from GCS (non-Windows runs)
        if: ${{ !contains(matrix.runner, 'windows-x86') }}
        run: >-
          mkdir -p $(pwd)/dist &&
          gsutil -m cp -r "${{ inputs.download_url_prefix }}"/$PLATFORM/python${JAXCI_HERMETIC_PYTHON_VERSION}/jaxlib*.whl $(pwd)/dist/
      - name: Download jaxlib wheel from GCS (Windows runs)
        if: ${{ contains(matrix.runner, 'windows-x86') }}
        shell: cmd
        run: >-
          mkdir dist &&
          gsutil -m cp -r "${{ inputs.download_url_prefix }}"/$PLATFORM/python${JAXCI_HERMETIC_PYTHON_VERSION}/jaxlib*.whl dist/
      - name: Install Python dependencies
        run: $JAXCI_PYTHON -m pip install -r build/requirements.in
      - name: Run Pytest CPU tests
        run: ./ci/run_pytest_cpu.sh
